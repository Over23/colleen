#|
  This file is a part of Colleen
  (c) 2013 TymoonNET/NexT http://tymoon.eu (shinmera@tymoon.eu)
  Author: Nicolas Hafner <shinmera@tymoon.eu>
|#

(in-package :org.tymoonnext.colleen.events)
;;; NON REPLY
(define-event ping-event :PING (event) 
    (server1 &optional server2)
    (:documentation "Event on a PING request."))

(define-event pong-event :PONG (event) 
    (server1 &optional server2)
    (:documentation "Event on a PONG request."))

(define-event nick-event :NICK (user-event)
    (old-nick)
    (:documentation "Event on nick change."))

(define-event privmsg-event :PRIVMSG (channel-event)
    (channel message)
    (:documentation "Privmsg event."))

(defmethod initialize-instance :after ((event privmsg-event) &rest rest)
  (declare (ignore rest))
  (with-slots ((channel %channel) (message %message)) event
    (setf channel (first (arguments event))
          message (second (arguments event)))
    (unless (char= (aref channel 0) #\#)
      (setf channel (nick event)))))

(define-event join-event :JOIN (channel-event) ()
    (:documentation "User join event."))

(define-event part-event :PART (channel-event) ()
    (:documentation "User part event."))

(define-event quit-event :QUIT (user-event)
    (reason)
    (:documentation "User quit event."))

(define-event mode-event :MODE (user-event)
    (target mode &optional parameter)
    (:documentation "Mode change event."))

(define-event topic-event :TOPIC (channel-event)
    (channel topic)
    (:documentation "Topic set event."))

(define-event kick-event :KICK (channel-event)
    (channel target reason)
    (:documentation "User kick event."))

(define-event notice-event :NOTICE (user-event)
    (NIL message)
    (:documentation "Notice message."))

;; REPLY CODES
(define-event welcome-event :RPL_WELCOME (event) 
    (message)
    (:documentation "Event on successful logon."))

(define-event whois-user-event :RPL_WHOISUSER (event)
    (NIL nick username hostmask NIL realname)
    (:documentation "Event on WHOISUSER response."))

(define-event whois-server-event :RPL_WHOISSERVER (event)
    (NIL nick hostname description)
    (:documentation "Event on WHOISSERVER response."))

(define-event whois-end-event :RPL_ENDOFWHOIS (event)
    (NIL nick)
    (:documentation "Event on ENDOFWHOIS response."))

(define-event whois-channels-event :RPL_WHOISCHANNELS (event)
    (NIL nick &rest channels)
    (:documentation "Event on WHOISCHANNELS response."))

(define-event whois-idle-event :RPL_WHOISIDLE (event)
    (NIL nick idle-time signon-time)
    (:documentation "Event on WHOISIDLE response."))

(define-event motd-event :RPL_MOTD (event)
    (NIL message)
    (:documentation "Event on a MOTD line."))

(define-event motd-end-event :RPL_ENDOFMOTD (event) ()
    (:documentation "Event on a ENDOFMOTD line."))

(define-event nick-in-use-event :ERR_NICKNAMEINUSE (event) ()
    (:documentation "Event when a requested nick is already in use."))

;;;;;;;;;;;;;;;; AUTOGENERATED ;;;;;;;;;;;;;;;;;;;;;;;

(defun print-generated-event-definition (name origin format comment)
  (setf name (string-trim '(#\Newline #\Linefeed #\Space) name))
  (setf origin (string-trim '(#\Newline #\Linefeed #\Space) origin))
  (setf format (string-trim '(#\Newline #\Linefeed #\Space) format))
  (setf comment (string-trim '(#\Newline #\Linefeed #\Space) comment))
  (let ((class-name (cl-ppcre:regex-replace-all "_" (string-downcase (subseq name 4)) "-"))
        (format (CL-PPCRE:REGEX-REPLACE-ALL "[\\n]" (cl-ppcre:regex-replace-all "_" (cl-ppcre:regex-replace-all "[<>:]" (string-downcase format) "") "-") " "))
        (comment (CL-PPCRE:REGEX-REPLACE-ALL "[ ]{2}" (CL-PPCRE:REGEX-REPLACE-ALL "[\\n]" comment " ") " ")))
    (format T "(define-event ~a-event :~a (event)~:[ ()~;~%    (~a)~]~%    (:documentation \"~a\"))~%~%" class-name name (> (length format) 1) format comment)))

(defun generate-event-definitions (path)
  ($ (initialize path :type :HTML) "tbody tr" 
     (each #'(lambda (a) 
               (print-generated-event-definition 
                ($ a "td" (eq 1) (text) (node)) 
                ($ a "td" (eq 2) (text) (node)) 
                ($ a "td" (eq 3) (text) (node)) 
                ($ a "td" (eq 4) (text) (node))) T)))
  NIL)
